// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
import { ProxyInfo, WebsocketConnection, } from "../common.browser/Exports";
import { OutputFormatPropertyName } from "../common.speech/Exports";
import { OutputFormat, PropertyId } from "../sdk/Exports";
import { ConnectionFactoryBase } from "./ConnectionFactoryBase";
import { WebsocketMessageFormatter } from "./Exports";
import { QueryParameterNames } from "./QueryParameterNames";
const baseUrl = "convai.speech";
const botFramework = {
    authHeader: "X-DLS-Secret",
    resourcePath: "",
    version: "v3"
};
const customCommands = {
    authHeader: "X-CommandsAppId",
    resourcePath: "commands",
    version: "v1"
};
const pathSuffix = "api";
const connectionID = "connectionId";
function getDialogSpecificValues(dialogType) {
    switch (dialogType) {
        case "custom_commands": {
            return customCommands;
        }
        case "bot_framework": {
            return botFramework;
        }
    }
    throw new Error(`Invalid dialog type '${dialogType}'`);
}
export class DialogConnectionFactory extends ConnectionFactoryBase {
    constructor() {
        super(...arguments);
        this.create = (config, authInfo, connectionId) => {
            const applicationId = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, "");
            const dialogType = config.parameters.getProperty(PropertyId.Conversation_DialogType);
            const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);
            const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, "en-US");
            const queryParams = {};
            queryParams[QueryParameterNames.LanguageParamName] = language;
            queryParams[QueryParameterNames.FormatParamName] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();
            queryParams[connectionID] = connectionId;
            const { resourcePath, version, authHeader } = getDialogSpecificValues(dialogType);
            const headers = {};
            if (authInfo.token != null && authInfo.token !== "") {
                headers[authInfo.headerName] = authInfo.token;
            }
            if (applicationId !== "") {
                headers[authHeader] = applicationId;
            }
            let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, "");
            if (endpoint === "") {
                const hostSuffix = (region && region.toLowerCase().startsWith("china")) ? ".azure.cn" : ".microsoft.com";
                // ApplicationId is only required for CustomCommands, so we're using that to determine default endpoint
                if (applicationId === "") {
                    endpoint = `wss://${region}.${baseUrl}${hostSuffix}/${pathSuffix}/${version}`;
                }
                else {
                    endpoint = `wss://${region}.${baseUrl}${hostSuffix}/${resourcePath}/${pathSuffix}/${version}`;
                }
            }
            this.setCommonUrlParams(config, queryParams, endpoint);
            return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);
        };
    }
}

//# sourceMappingURL=DialogConnectorFactory.js.map
