{"version":3,"sources":["src/common.speech/DialogConnectorFactory.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,WAAW,EAAqB,MAAM,mBAAmB,CAAC;AAEnE,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAChE,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAA6B,MAAM,WAAW,CAAC;AAsClF,qBAAa,uBAAwB,SAAQ,qBAAqB;IAEvD,MAAM,uFA0CZ;CACJ","file":"DialogConnectorFactory.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nconst baseUrl: string = \"convai.speech\";\r\n\r\ninterface IBackendValues {\r\n    authHeader: string;\r\n    resourcePath: string;\r\n    version: string;\r\n}\r\n\r\nconst botFramework: IBackendValues = {\r\n    authHeader: \"X-DLS-Secret\",\r\n    resourcePath: \"\",\r\n    version: \"v3\"\r\n};\r\n\r\nconst customCommands: IBackendValues = {\r\n    authHeader: \"X-CommandsAppId\",\r\n    resourcePath: \"commands\",\r\n    version: \"v1\"\r\n};\r\n\r\nconst pathSuffix: string = \"api\";\r\nconst connectionID: string = \"connectionId\";\r\n\r\nfunction getDialogSpecificValues(dialogType: string): IBackendValues {\r\n    switch (dialogType) {\r\n        case \"custom_commands\": {\r\n            return customCommands;\r\n        }\r\n        case \"bot_framework\": {\r\n            return botFramework;\r\n        }\r\n    }\r\n    throw new Error(`Invalid dialog type '${dialogType}'`);\r\n}\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[QueryParameterNames.LanguageParamName] = language;\r\n        queryParams[QueryParameterNames.FormatParamName] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[connectionID] = connectionId;\r\n\r\n        const {resourcePath, version, authHeader} = getDialogSpecificValues(dialogType);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        if (applicationId !== \"\") {\r\n            headers[authHeader] = applicationId;\r\n        }\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (endpoint === \"\") {\r\n            const hostSuffix = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            // ApplicationId is only required for CustomCommands, so we're using that to determine default endpoint\r\n            if (applicationId === \"\") {\r\n                endpoint = `wss://${region}.${baseUrl}${hostSuffix}/${pathSuffix}/${version}`;\r\n            } else {\r\n                endpoint = `wss://${region}.${baseUrl}${hostSuffix}/${resourcePath}/${pathSuffix}/${version}`;\r\n            }\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\r\n    }\r\n}\r\n"]}