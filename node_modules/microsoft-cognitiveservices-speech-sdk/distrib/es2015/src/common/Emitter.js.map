{"version":3,"sources":["src/common/Emitter.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAE,YAAY,EAAE,MAAM,IAAI,CAAC;AAYlC,gDAAgD;AAChD,MAAM,aAAa;IAGf;QAFQ,WAAM,GAA0B,IAAI,CAAC;QAGzC,IAAI;YACA,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;SACnC;QAAC,OAAO,KAAK,EAAE;YACZ,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;aAC9D;iBAAM;gBACH,MAAM,KAAK,CAAC;aACf;SACJ;IACL,CAAC;IAEM,EAAE,CAAC,SAAiB,EAAE,QAA8C;QACvE,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC;IACM,GAAG,CAAC,SAAiB,EAAE,QAA8C;QACxE,OAAO,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAChE,CAAC;IACM,IAAI,CAAC,SAAiB,EAAE,MAAqB;QAChD,IAAI,CAAC,MAAM,CAAC,aAAa,CACrB,IAAI,WAAW,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,CAAC,CACzC,CAAC;IACN,CAAC;CACJ;AAED,gDAAgD;AAChD,MAAM,OAAO,eAAe;IAExB;QACI,IAAI,YAAY,KAAK,SAAS,EAAE;YAC5B,IAAI,CAAC,WAAW,GAAG,IAAI,YAAY,EAAE,CAAC;SACzC;aAAM;YACH,IAAI,CAAC,WAAW,GAAG,IAAI,aAAa,EAAE,CAAC;SAC1C;IACL,CAAC;IACM,EAAE,CAAwB,SAAY,EAAE,EAAuB;QAClE,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC;IAEM,GAAG,CAAwB,SAAY,EAAE,EAAuB;QACnE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IACxC,CAAC;IAEM,IAAI,CAAwB,SAAY,EAAE,MAAY;QACzD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC;CACJ","file":"Emitter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventEmitter } from \"ws\";\r\nimport { PlatformEvent } from \"./Exports\";\r\ntype EventMap = Record<string, PlatformEvent>;\r\ntype EventKey<T extends EventMap> = string & keyof T;\r\ntype EventReceiver<T> = (params: T) => void;\r\n\r\nexport interface Emitter<T extends EventMap> {\r\n    on<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>): void;\r\n    off<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>): void;\r\n    emit<K extends EventKey<T>>(eventName: K, params: T[K]): void;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nclass CustomEmitter {\r\n    private target: Element | EventTarget = null;\r\n\r\n    public constructor() {\r\n        try {\r\n            this.target = new EventTarget();\r\n        } catch (error) {\r\n            if (typeof window !== \"undefined\") {\r\n                this.target = window.document.createElement(\"eventTarget\");\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    public on(eventName: string, listener: EventReceiver<Event | PlatformEvent>): void {\r\n        return this.target.addEventListener(eventName, listener);\r\n    }\r\n    public off(eventName: string, listener: EventReceiver<Event | PlatformEvent>): void {\r\n        return this.target.removeEventListener(eventName, listener);\r\n    }\r\n    public emit(eventName: string, detail: PlatformEvent): void {\r\n        this.target.dispatchEvent(\r\n            new CustomEvent(eventName, { detail })\r\n        );\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PlatformEmitter<T extends EventMap> implements Emitter<T> {\r\n    private privEmitter: CustomEmitter | EventEmitter;\r\n    public constructor() {\r\n        if (EventEmitter !== undefined) {\r\n            this.privEmitter = new EventEmitter();\r\n        } else {\r\n            this.privEmitter = new CustomEmitter();\r\n        }\r\n    }\r\n    public on<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>): void {\r\n        this.privEmitter.on(eventName, fn);\r\n    }\r\n\r\n    public off<K extends EventKey<T>>(eventName: K, fn: EventReceiver<T[K]>): void {\r\n        this.privEmitter.off(eventName, fn);\r\n    }\r\n\r\n    public emit<K extends EventKey<T>>(eventName: K, params: T[K]): void {\r\n        this.privEmitter.emit(eventName, params);\r\n    }\r\n}\r\n"]}