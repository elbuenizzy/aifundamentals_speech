{"version":3,"sources":["src/common/EventSource.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,qCAA4C;AAC5C,iCAA8C;AAC9C,+BAA0C;AAM1C;IAMI,qBAAY,QAAoC;QAAhD,iBAGC;QARO,iBAAY,GAA4B,EAAE,CAAC;QAG3C,mBAAc,GAAY,KAAK,CAAC;QAOjC,YAAO,GAAG,UAAC,KAAa;YAC3B,IAAI,KAAI,CAAC,UAAU,EAAE,EAAE;gBACnB,MAAM,CAAC,IAAI,2BAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;aAClD;YAED,IAAI,KAAI,CAAC,QAAQ,EAAE;gBACf,KAAK,IAAM,SAAS,IAAI,KAAI,CAAC,QAAQ,EAAE;oBACnC,IAAI,SAAS,EAAE;wBACX,IAAI,KAAK,CAAC,QAAQ,EAAE;4BAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;gCAC5B,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;6BACxD;yBACJ;qBACJ;iBACJ;aACJ;YAED,KAAK,IAAM,OAAO,IAAI,KAAI,CAAC,YAAY,EAAE;gBACrC,IAAI,OAAO,IAAI,KAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE;oBACvC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;iBACzC;aACJ;QACL,CAAC,CAAA;QAEM,WAAM,GAAG,UAAC,eAAwC;YACrD,IAAM,EAAE,GAAG,uBAAgB,EAAE,CAAC;YAC9B,KAAI,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC;YACzC,KAAI,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;YAC7B,OAAO;gBACH,MAAM,EAAE;oBACJ,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC;oBAC1C,OAAO,KAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;oBAC7B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;aACJ,CAAC;QACN,CAAC,CAAA;QAEM,mBAAc,GAAG,UAAC,QAAgC;YACrD,OAAO,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC,CAAA;QAEM,eAAU,GAAG;YAChB,OAAO,KAAI,CAAC,cAAc,CAAC;QAC/B,CAAC,CAAA;QAEM,YAAO,GAAG;YACb,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC/B,CAAC,CAAA;QAnDG,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,IAAI,yBAAe,EAAiC,CAAC;IAC5E,CAAC;IAmDD,sBAAW,iCAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;;;OAAA;IACL,kBAAC;AAAD,CA/DA,AA+DC,IAAA;AA/DY,kCAAW","file":"EventSource.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PlatformEmitter } from \"./Emitter\";\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventIds: Record<string, boolean> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privEmitter: PlatformEmitter<Record<string, PlatformEvent>>;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n        this.privEmitter = new PlatformEmitter<Record<string, PlatformEvent>>();\r\n    }\r\n\r\n    public onEvent = (event: TEvent): void => {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventIds) {\r\n            if (eventId && this.privEventIds[eventId]) {\r\n                this.privEmitter.emit(eventId, event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\r\n        const id = createNoDashGuid();\r\n        this.privEmitter.on(id, onEventCallback);\r\n        this.privEventIds[id] = true;\r\n        return {\r\n            detach: () => {\r\n                this.privEmitter.off(id, onEventCallback);\r\n                delete this.privEventIds[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener = (listener: IEventListener<TEvent>): IDetachable => {\r\n        return this.attach(listener.onEvent);\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n"]}